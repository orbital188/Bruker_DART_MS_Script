#!/usr/bin/env python3
"""
ChemCalc Data Downloader and Merger

This script downloads molecular formula data from ChemCalc API for each formula
in the input CSV file, saves individual CSV files, and merges all data into
one comprehensive JSON file.

Author: Generated by AI Assistant
Date: 2024
"""

import csv
import json
import os
import time
import urllib.request
import urllib.parse
from pathlib import Path

# Configuration parameters
INPUT_CSV_FILE = 'dart_td_ms_positive_comprehensive.csv'
OUTPUT_FOLDER = 'chemcalc_data'
MERGED_JSON_FILE = 'merged_chemcalc_data.json'
CHEMCALC_API_URL = 'https://www.chemcalc.org/chemcalc/mf'
REQUEST_DELAY = 1.0  # Delay between requests to be respectful to the API

def create_output_directory():
    """Create output directory if it doesn't exist."""
    Path(OUTPUT_FOLDER).mkdir(exist_ok=True)
    print(f"Output directory created: {OUTPUT_FOLDER}")

def read_formulas_from_csv(csv_file):
    """Read molecular formulas from the CSV file."""
    formulas = []
    try:
        with open(csv_file, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            for row in reader:
                if 'formula' in row and row['formula'].strip():
                    formulas.append({
                        'compound': row.get('compound_or_fragment', 'Unknown'),
                        'formula': row['formula'].strip()
                    })
        print(f"Found {len(formulas)} formulas in {csv_file}")
        return formulas
    except FileNotFoundError:
        print(f"Error: CSV file '{csv_file}' not found.")
        return []
    except Exception as e:
        print(f"Error reading CSV file: {e}")
        return []

def download_chemcalc_data(formula, compound_name):
    """Download data for a specific molecular formula from ChemCalc API."""
    params = {
        'mf': formula,
        'isotopomers': 'jcamp,xy'
    }
    
    try:
        # Encode parameters and create request
        encoded_params = urllib.parse.urlencode(params).encode('utf-8')
        request = urllib.request.Request(CHEMCALC_API_URL, encoded_params)
        
        # Add headers to mimic a browser request
        request.add_header('User-Agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36')
        
        # Make the request
        with urllib.request.urlopen(request, timeout=30) as response:
            data = response.read()
            json_data = json.loads(data.decode('utf-8'))
            
            # Add metadata
            json_data['_metadata'] = {
                'compound_name': compound_name,
                'molecular_formula': formula,
                'download_timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
                'source': 'ChemCalc API'
            }
            
            return json_data
            
    except urllib.error.URLError as e:
        print(f"  Error downloading data for {formula}: {e}")
        return None
    except json.JSONDecodeError as e:
        print(f"  Error parsing JSON for {formula}: {e}")
        return None
    except Exception as e:
        print(f"  Unexpected error for {formula}: {e}")
        return None

def save_individual_csv(data, formula, compound_name):
    """Save individual formula data as CSV file."""
    if not data:
        return False
    
    # Create a safe filename
    safe_formula = formula.replace('/', '_').replace('+', 'plus').replace('-', 'minus')
    safe_compound = compound_name.replace('/', '_').replace('\\', '_').replace(':', '_')
    filename = f"{safe_compound}_{safe_formula}.csv"
    filepath = os.path.join(OUTPUT_FOLDER, filename)
    
    try:
        # Extract relevant data for CSV (this will depend on the actual API response structure)
        # For now, we'll save the raw data in a structured way
        with open(filepath, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile)
            
            # Write header
            writer.writerow(['Field', 'Value'])
            
            # Write data in key-value pairs
            for key, value in data.items():
                if key != '_metadata':  # Skip metadata for CSV
                    if isinstance(value, dict):
                        for subkey, subvalue in value.items():
                            writer.writerow([f"{key}_{subkey}", str(subvalue)])
                    else:
                        writer.writerow([key, str(value)])
        
        print(f"  Saved CSV: {filename}")
        return True
        
    except Exception as e:
        print(f"  Error saving CSV for {formula}: {e}")
        return False

def merge_all_data(all_data):
    """Merge all downloaded data into one comprehensive JSON file."""
    merged_data = {
        'summary': {
            'total_formulas': len(all_data),
            'successful_downloads': len([d for d in all_data if d is not None]),
            'failed_downloads': len([d for d in all_data if d is None]),
            'generation_timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'source_csv': INPUT_CSV_FILE
        },
        'formulas': all_data
    }
    
    try:
        with open(MERGED_JSON_FILE, 'w', encoding='utf-8') as jsonfile:
            json.dump(merged_data, jsonfile, indent=2, ensure_ascii=False)
        
        print(f"\nMerged data saved to: {MERGED_JSON_FILE}")
        return True
        
    except Exception as e:
        print(f"Error saving merged JSON: {e}")
        return False

def main():
    """Main function to orchestrate the data download and merging process."""
    print("ChemCalc Data Downloader and Merger")
    print("=" * 50)
    
    # Create output directory
    create_output_directory()
    
    # Read formulas from CSV
    formulas = read_formulas_from_csv(INPUT_CSV_FILE)
    if not formulas:
        print("No formulas found. Exiting.")
        return
    
    # Download data for each formula
    print(f"\nDownloading data for {len(formulas)} formulas...")
    all_data = []
    
    for i, formula_info in enumerate(formulas, 1):
        compound = formula_info['compound']
        formula = formula_info['formula']
        
        print(f"[{i}/{len(formulas)}] Downloading: {compound} ({formula})")
        
        # Download data
        data = download_chemcalc_data(formula, compound)
        
        # Save individual CSV
        if data:
            save_individual_csv(data, formula, compound)
        
        # Store data for merging
        all_data.append(data)
        
        # Be respectful to the API
        if i < len(formulas):  # Don't delay after the last request
            time.sleep(REQUEST_DELAY)
    
    # Merge all data into one JSON file
    print(f"\nMerging all data...")
    if merge_all_data(all_data):
        print("\nProcess completed successfully!")
        print(f"Individual CSV files saved in: {OUTPUT_FOLDER}/")
        print(f"Merged JSON file: {MERGED_JSON_FILE}")
    else:
        print("\nProcess completed with errors during merging.")

if __name__ == "__main__":
    main()
